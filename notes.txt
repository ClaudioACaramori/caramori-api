Algumas palavras sobre teste de Software :D

- TDD (Test-Driven Development)
  - O Software deve ser feito em iterações
    - Primeiro escrevemos o teste que deve falhar
    - Desenvolvemos o que é necessário para não falhar mais
    - Refatoramos se houver necessidade
  - Por que vale a pena implementar?
    - Com o passar do tempo e o aumento do code base garantir que as coisas funcionam fica mais fácil
    - Temos uma documentação detalhada do projeto 
    - Com a integração contínua faz com que todo o time tenha uma grande confiança no que está sendo entregue/feito
  - Como podemos fazer isso?
    - RSPEC, MiniTest e afins

- BDD (Behavior-Driven Development
  - Qual a diferença entre TDD e BDD?
    - TDD é focado na percepção do DESENVOLVEDOR de como o SOFTWARE deve FUNCIONAR. 
    BDD é focado em como o USUÁRIO gostaria que o SOFTWARE deve se COMPORTAR.
    - O TDD não diz respeito sobre
      - Quando eu começo a codar?
      - O que eu deveria realmente testar?
      - Como os testes devem ser estruturados e nomeados?
      - E principalmente: Como eu vou testar um negócio que eu nem fiz ainda???
    - Ai veio o questionamento: E se ao invez de escrever testes, especificássemos os comportamentos da aplicação?
    Melhor ainda: O Comportamento que o usuário gostaria que a aplicação tivesse? MINDBLOWWWW

  - Como isso funciona?
    - Primeiro precisamos pegar alguma parte da funcionalidade que é importante para o usuário. 
    - Neste ponto, deixamos de ser Devs e nos tornamos usuários (o que o usuário quer não o Dev)
    - Especificamos quais são as necessidade, de software, que devem ser sanadas para que o valor seja atendido
    - Depois disso bora codar!

  - Parece fácil né... 
    - Mas Quantas vezes você já começou pelo login...
    - É preciso de feedback e empatia.
    - Sempre converse com o seu PO, ou com o Designer ou com o CX para decidir isso.

  - Beleza, consegui definir qual funcionalidade é importante para o meu usuário
  - Como faço para especificar esse comportamento?
      
      class UserTest < Test::Unit::TestCase
        def test_name_set
          user = User.new "Diogo"
          assert_equal(user.name, "Diogo")
        end
      end
    - Funciona lindão, estou verificando se a função está funcionando...

  - Mas o que queremos é descrever comportamentos... Para isso:
    - Descrevemos o comportamento com sentenças 
    - A sintáxe do código deve ser lida naturalmente (Rspec deixa isso lindão)

      describe User do
        it "lets me assign a name" do
          user = User.new "Diogo"
          user.name.should == "Diogo"
        end
      end

    - Pontos importantes:
      - Foco: precisamos testar exatamento o que a sentença diz... 
      - Documentação: Só lendo a sentença já dá para saber o que esse negocio faz.
      - Regressão: Se algo mudou, sem problemas, tudo vai estar funcionando, e se não tiver, você vai descobrir.

  - Estamos indo bem, mas com essa granularidade não conseguimos descrever a necessidade do nosso usuário.
  - Para isso utilizamos as histórias de usuarios (Olha o Cucumber ai :D)

      Feature: Produtos estornados devem voltar para o estoque
        PARA manter o controle do estoque
        COMO um dono de mercado EU QUERO devolver os produtos para o estoque quando estornados
        // Produto não deve estar quebrado
        // Produto não deve ter sido comprado a mais de 30 dias

      Scenario: Produtos estornados devem ser colocados no estoque
        Given um cliente que comprou uma camiseta preta 
        And e ainda exista três camisetas pretas no estoque
        When o clinete retornar o produto
        Then eu devo ter quatro camisetas pretas no estoque

      Scenario: Produtos trocados devem ser colocados no estoque
        Given que um cliente comprou uma camiseta azul
        And eu tenha duas camisetas azuis no estoque
        And três camisetas pretas no estoque
        When o cliente retorna a camiseta preta e troca pela preta,
        Then eu devo ter três camisetas azuis no estoque
        And duas camisetas pretas no estoque

      // Scenario: Produtos comprados a mais de 30 dias não devem ser colocados no estoque
      //   Given que um cliente comprou uma camiseta azul
      //   And essa compra tenha sido feita a 40 dias
      //   And eu tenha duas camisetas azuis no estoque
      //   When o cliente retorna a camiseta azul,
      //   Then eu devo ter duas camisetas azuis no estoque

    - Todas as funcionalidade possuem o mesmo modelo:
      - Para: qual o benefício?
      - Como: quem é o beneficiário?
      - Eu quero: o que a funcionalidade deve fazer?

    - E elas possuem um conjunto de cenários associados que possuem o formato:
      - Given: Os passos ou pré-requisitos para a "execução" (também pode ser o que ocorreu até agora)
      - When: As ações que o usuário vai tomar na funcionalidade (aqui os passos são dentro da feature)
      - Then: O que deve ocorrer após tudo isso acontecer.

  - Até agora nada de novo :D

- BDD com cucumber
  - O que é o cucumber?
    - Um framework para o suporte de BDD
    - Ele executa especificações dados em linguagem natural 
    - Mostra um relatório referente a quais comportamentos funcionam ou não
    - Reduz o tempo de especificação de requisitos e automoatiza o processo de validação
    - Ele é compatível com a maioria das plataformas de desenvolvimento

  - Como ele funciona?
    - Bora mostrar :D

- Forther reading:
  - http://www.betterspecs.org/
  - https://hadihariri.com/2012/04/11/what-bdd-has-taught-me/
  - https://docs.cucumber.io/cucumber/
  - https://www.linkedin.com/pulse/scenario-step-definition-best-practices-cucumber-dilshan-fernando/
